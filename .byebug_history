exit
Date.today + 1.month
Date.today
User.find_by(email: params[:email])
params[:email]
Date.today.month
params
exit
self
title
title = "Proposal Created For #{addresse} on #{Date.today}" if title.blank?
title.blank?
title
exit
@proposals
exit
current_user.proposals
@proposals
exit
user.work_experience
response.choices.first[:message][:content]
response
response.dig("choices", 0, "message", "content")
response = client.chat.completions.create(
        model: "gpt-4", 
  messages: [
    { role: "system", content: "You write effective freelance job proposals for UpWork." },
    { role: "user", content: "Write a proposal addressed to #{addresse} from #{user.full_name}. #{user.full_name} has the following work experience '#{user.work_experience}' and is applying for the following job '#{description}'. Keep the proposal under 200 words to be in line with UpWork requirements." }
  ],
  temperature: 0.7
)
addresse
response = client.chat.completions.create(
        parameters: {
          model: "gpt-4",
          messages: [
            { role: "system", content: "You write effective freelance job proposals for UpWork." },
            { role: "user", content: "Write a proposal addressed to #{addresse} from #{user.full_name}. #{user.full_name} has the following work experience '#{user.work_experience}' and is applying for the following job '#{description}'. Keep the proposal under 200 words to be in line with UpWork requirements." }
          ],
          temperature: 0.7
        }
      )
response = client.chat(
        parameters: {
          model: "gpt-4",
          messages: [
            { role: "system", content: "You write effective freelance job proposals for UpWork." },
            { role: "user", content: "Write a proposal addressed to #{addresse} from #{user.full_name}. #{user.full_name} has the following work experience '#{user.work_experience}' and is applying for the following job '#{description}'. Keep the proposal under 200 words to be in line with UpWork requirements." }
          ]})
response = client.chat(
        parameters: {
          model: "gpt-4",
          messages: [
            { role: "system", content: "You write effective freelance job proposals for UpWork." },
            { role: "user", content: "Write a proposal addressed to #{addresse} from #{user.full_name}. #{user.full_name} has the following work experience '#{user.work_experience}' and is applying for the following job '#{description}'. Keep the proposal under 200 words to be in line with UpWork requirements." }
          ],
          temperature: 0.7
        }
      )
client
response = client.chat(
  model: "gpt-4", 
  messages: [
    { role: "system", content: "You write effective freelance job proposals for UpWork." },
    { role: "user", content: "Write a proposal addressed to #{addresse} from #{user.full_name}. #{user.full_name} has the following work experience '#{user.work_experience}' and is applying for the following job '#{description}'. Keep the proposal under 200 words to be in line with UpWork requirements." }
  ],
  temperature: 0.7
)
response = client.chat(
  model: "gpt-4",
  messages: [
    { role: "system", content: "You write effective freelance job proposals for UpWork." },
    { role: "user", content: "Write a proposal addressed to #{addresse} from #{user.full_name}. #{user.full_name} has the following work experience '#{user.work_experience}' and is applying for the following job '#{description}'. Keep the proposal under 200 words to be in line with UpWork requirements." }
  ],
  temperature: 0.7
)
response = client.chat(
  model: "gpt-4", 
  messages: [
    { role: "system", content: "You write effective freelance job proposals for UpWork." },
    { role: "user", content: "Write a proposal addressed to #{addresse} from #{user.full_name}. #{user.full_name} has the following work experience '#{user.work_experience}' and is applying for the following job '#{description}'. Keep the proposal under 200 words to be in line with UpWork requirements." }
  ],
  temperature: 0.7
)
response = client.chat(
        parameters: {
          model: "gpt-4",
          messages: [
            { role: "system", content: "You write effective freelance job proposals for UpWork." },
            { role: "user", content: "Write a proposal addressed to #{addresse} from #{user.full_name}. #{user.full_name} has the following work experience '#{user.work_experience}' and is applying for the following job '#{description}'. Keep the proposal under 200 words to be in line with UpWork requirements." }
          ],
          temperature: 0.7
        }
      )
client = OpenAI::Client.new(api_key: ENV['OPENAI_API_KEY'])
exit
current_user
@current_user
params
user_params
exit
user_params
exit
params
exit
params
exit
params
exit
response.body
response = client.request(:get, '/oauth2/v2/userinfo', headers: { 'Authorization' => "Bearer #{access_token}" })
client = OAuth2::Client.new(
      ENV['GOOGLE_CLIENT_ID'], 
      ENV['GOOGLE_CLIENT_SECRET'], 
      site: 'https://www.googleapis.com'
    )
exit
